#ifndef OPS
#include <stdint.h>


#define OPS \
OP(STOP,0,0) \
OP(ADD,2,1) \
OP(MUL,2,1) \
OP(SUB,2,1) \
OP(DIV,2,1) \
OP(SDIV,2,1) \
OP(MOD,2,1) \
OP(SMOD,2,1) \
OP(ADDMOD,3,1) \
OP(MULMOD,3,1) \
OP(EXP,2,1) \
OP(SIGNEXTEND,2,1) \
OP(ASSERT_0x0c,2,1) \
OP(ASSERT_0x0d,2,1) \
OP(ASSERT_0x0e,2,1) \
OP(ASSERT_0x0f,2,1) \
OP(LT,2,1) \
OP(GT,2,1) \
OP(SLT,2,1) \
OP(SGT,2,1) \
OP(EQ,2,1) \
OP(ISZERO,1,1) \
OP(AND,2,1) \
OP(OR,2,1) \
OP(XOR,2,1) \
OP(NOT,2,1) \
OP(BYTE,2,1) \
OP(SHL,2,1) \
OP(SHR,2,1) \
OP(SAR,2,1) \
OP(ASSERT_0x1e,2,1) \
OP(ASSERT_0x1f,2,1) \
OP(SHA3,2,1) \
OP(ASSERT_0x21,2,1) \
OP(ASSERT_0x22,2,1) \
OP(ASSERT_0x23,2,1) \
OP(ASSERT_0x24,2,1) \
OP(ASSERT_0x25,2,1) \
OP(ASSERT_0x26,2,1) \
OP(ASSERT_0x27,2,1) \
OP(ASSERT_0x28,2,1) \
OP(ASSERT_0x29,2,1) \
OP(ASSERT_0x2a,2,1) \
OP(ASSERT_0x2b,2,1) \
OP(ASSERT_0x2c,2,1) \
OP(ASSERT_0x2d,2,1) \
OP(ASSERT_0x2e,2,1) \
OP(ASSERT_0x2f,2,1) \
OP(ADDRESS,0,1) \
OP(BALANCE,1,1) \
OP(ORIGIN,0,1) \
OP(CALLER,0,1) \
OP(CALLVALUE,0,1) \
OP(CALLDATALOAD,1,1) \
OP(CALLDATASIZE,0,1) \
OP(CALLDATACOPY,3,0) \
OP(CODESIZE,0,1) \
OP(CODECOPY,3,0) \
OP(GASPRICE,0,1) \
OP(EXTCODESIZE,1,1) \
OP(EXTCODECOPY,4,0) \
OP(RETURNDATASIZE,0,1) \
OP(RETURNDATACOPY,3,0) \
OP(EXTCODEHASH,1,1) \
OP(BLOCKHASH,1,1) \
OP(COINBASE,0,1) \
OP(TIMESTAMP,0,1) \
OP(NUMBER,0,1) \
OP(DIFFICULTY,0,1) \
OP(GASLIMIT,0,1) \
OP(ASSERT_0x46,0,1) \
OP(SELFBALANCE,0,1) \
OP(ASSERT_0x48,0,1) \
OP(ASSERT_0x49,0,1) \
OP(ASSERT_0x4a,0,1) \
OP(ASSERT_0x4b,0,1) \
OP(ASSERT_0x4c,0,1) \
OP(ASSERT_0x4d,0,1) \
OP(ASSERT_0x4e,0,1) \
OP(ASSERT_0x4f,0,1) \
OP(POP,1,0) \
OP(MLOAD,1,1) \
OP(MSTORE,2,0) \
OP(MSTORE8,2,0) \
OP(SLOAD,1,1) \
OP(SSTORE,2,0) \
OP(JUMP,1,0) \
OP(JUMPI,2,0) \
OP(PC,0,1) \
OP(MSIZE,0,1) \
OP(GAS,0,1) \
OP(JUMPDEST,0,0) \
OP(ASSERT_0x5c,0,0) \
OP(ASSERT_0x5d,0,0) \
OP(ASSERT_0x5e,0,0) \
OP(ASSERT_0x5f,0,0) \
OP(PUSH1,0,1) \
OP(PUSH2,0,1) \
OP(PUSH3,0,1) \
OP(PUSH4,0,1) \
OP(PUSH5,0,1) \
OP(PUSH6,0,1) \
OP(PUSH7,0,1) \
OP(PUSH8,0,1) \
OP(PUSH9,0,1) \
OP(PUSH10,0,1) \
OP(PUSH11,0,1) \
OP(PUSH12,0,1) \
OP(PUSH13,0,1) \
OP(PUSH14,0,1) \
OP(PUSH15,0,1) \
OP(PUSH16,0,1) \
OP(PUSH17,0,1) \
OP(PUSH18,0,1) \
OP(PUSH19,0,1) \
OP(PUSH20,0,1) \
OP(PUSH21,0,1) \
OP(PUSH22,0,1) \
OP(PUSH23,0,1) \
OP(PUSH24,0,1) \
OP(PUSH25,0,1) \
OP(PUSH26,0,1) \
OP(PUSH27,0,1) \
OP(PUSH28,0,1) \
OP(PUSH29,0,1) \
OP(PUSH30,0,1) \
OP(PUSH31,0,1) \
OP(PUSH32,0,1) \
OP(DUP1,0,1) \
OP(DUP2,0,1) \
OP(DUP3,0,1) \
OP(DUP4,0,1) \
OP(DUP5,0,1) \
OP(DUP6,0,1) \
OP(DUP7,0,1) \
OP(DUP8,0,1) \
OP(DUP9,0,1) \
OP(DUP10,0,1) \
OP(DUP11,0,1) \
OP(DUP12,0,1) \
OP(DUP13,0,1) \
OP(DUP14,0,1) \
OP(DUP15,0,1) \
OP(DUP16,0,1) \
OP(SWAP1,0,0) \
OP(SWAP2,0,0) \
OP(SWAP3,0,0) \
OP(SWAP4,0,0) \
OP(SWAP5,0,0) \
OP(SWAP6,0,0) \
OP(SWAP7,0,0) \
OP(SWAP8,0,0) \
OP(SWAP9,0,0) \
OP(SWAP10,0,0) \
OP(SWAP11,0,0) \
OP(SWAP12,0,0) \
OP(SWAP13,0,0) \
OP(SWAP14,0,0) \
OP(SWAP15,0,0) \
OP(SWAP16,0,0) \
OP(LOG0,2,0) \
OP(LOG1,3,0) \
OP(LOG2,4,0) \
OP(LOG3,5,0) \
OP(LOG4,6,0) \
OP(ASSERT_0xa5,7,0) \
OP(ASSERT_0xa6,7,0) \
OP(ASSERT_0xa7,7,0) \
OP(ASSERT_0xa8,7,0) \
OP(ASSERT_0xa9,7,0) \
OP(ASSERT_0xaa,7,0) \
OP(ASSERT_0xab,7,0) \
OP(ASSERT_0xac,7,0) \
OP(ASSERT_0xad,7,0) \
OP(ASSERT_0xae,7,0) \
OP(ASSERT_0xaf,7,0) \
OP(ASSERT_0xb0,7,0) \
OP(ASSERT_0xb1,7,0) \
OP(ASSERT_0xb2,7,0) \
OP(ASSERT_0xb3,7,0) \
OP(ASSERT_0xb4,7,0) \
OP(ASSERT_0xb5,7,0) \
OP(ASSERT_0xb6,7,0) \
OP(ASSERT_0xb7,7,0) \
OP(ASSERT_0xb8,7,0) \
OP(ASSERT_0xb9,7,0) \
OP(ASSERT_0xba,7,0) \
OP(ASSERT_0xbb,7,0) \
OP(ASSERT_0xbc,7,0) \
OP(ASSERT_0xbd,7,0) \
OP(ASSERT_0xbe,7,0) \
OP(ASSERT_0xbf,7,0) \
OP(ASSERT_0xc0,7,0) \
OP(ASSERT_0xc1,7,0) \
OP(ASSERT_0xc2,7,0) \
OP(ASSERT_0xc3,7,0) \
OP(ASSERT_0xc4,7,0) \
OP(ASSERT_0xc5,7,0) \
OP(ASSERT_0xc6,7,0) \
OP(ASSERT_0xc7,7,0) \
OP(ASSERT_0xc8,7,0) \
OP(ASSERT_0xc9,7,0) \
OP(ASSERT_0xca,7,0) \
OP(ASSERT_0xcb,7,0) \
OP(ASSERT_0xcc,7,0) \
OP(ASSERT_0xcd,7,0) \
OP(ASSERT_0xce,7,0) \
OP(ASSERT_0xcf,7,0) \
OP(ASSERT_0xd0,7,0) \
OP(ASSERT_0xd1,7,0) \
OP(ASSERT_0xd2,7,0) \
OP(ASSERT_0xd3,7,0) \
OP(ASSERT_0xd4,7,0) \
OP(ASSERT_0xd5,7,0) \
OP(ASSERT_0xd6,7,0) \
OP(ASSERT_0xd7,7,0) \
OP(ASSERT_0xd8,7,0) \
OP(ASSERT_0xd9,7,0) \
OP(ASSERT_0xda,7,0) \
OP(ASSERT_0xdb,7,0) \
OP(ASSERT_0xdc,7,0) \
OP(ASSERT_0xdd,7,0) \
OP(ASSERT_0xde,7,0) \
OP(ASSERT_0xdf,7,0) \
OP(ASSERT_0xe0,7,0) \
OP(ASSERT_0xe1,7,0) \
OP(ASSERT_0xe2,7,0) \
OP(ASSERT_0xe3,7,0) \
OP(ASSERT_0xe4,7,0) \
OP(ASSERT_0xe5,7,0) \
OP(ASSERT_0xe6,7,0) \
OP(ASSERT_0xe7,7,0) \
OP(ASSERT_0xe8,7,0) \
OP(ASSERT_0xe9,7,0) \
OP(ASSERT_0xea,7,0) \
OP(ASSERT_0xeb,7,0) \
OP(ASSERT_0xec,7,0) \
OP(ASSERT_0xed,7,0) \
OP(ASSERT_0xee,7,0) \
OP(ASSERT_0xef,7,0) \
OP(CREATE,3,1) \
OP(CALL,7,1) \
OP(CALLCODE,7,1) \
OP(RETURN,2,0) \
OP(DELEGATECALL,6,1) \
OP(CREATE2,6,1) \
OP(ASSERT_0xf6,6,1) \
OP(ASSERT_0xf7,6,1) \
OP(ASSERT_0xf8,6,1) \
OP(ASSERT_0xf9,6,1) \
OP(STATICCALL,6,1) \
OP(ASSERT_0xfb,6,1) \
OP(ASSERT_0xfc,6,1) \
OP(REVERT,2,0) \
OP(INVALID,0,0) \
OP(SELFDESTRUCT,1,0)


typedef enum {
    #define OP(name,in,out) name,
    OPS
    #undef OP
    NUM_OPCODES
} op_et;
typedef uint8_t op_t;

extern const op_t argCount[NUM_OPCODES];
extern const op_t retCount[NUM_OPCODES];
extern op_t opFromString(const char *str);
op_t parseOp(const char *start, const char **endOut);

#endif // OPS
